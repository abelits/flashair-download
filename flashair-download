#!/bin/sh

#
# Hardware type, "FlashAir" or "Transcend"

HWTYPE="FlashAir"
#HWTYPE="Transcend"

#
# Network interface for wifi connection
#
WLANIF="wlan0"

#
# Connection name and SSID of the FlashAir card
#

SSID="FA-XP1"

#
# Local directory above the copy of the camera's DCIM directory
#
BASEDIR="/home/user/Desktop/Photos/Camera1"

#
# FlashAir URL above the DCIM directory
#

BASEURL="http://192.168.0.1"
#BASEURL="http://192.168.11.254"

check="true"
for ex in \
 echo echo sleep date grep sed cut tail nmcli wget
  do
    loc=$(which "${ex}")
    if [ "${loc}" = "" ]
      then
        echo "${ex} is missing"
        check="false"
    fi
done

if [ "${check}" = "false" ]
  then
    echo "Some utilities are missing"
    exit 1
fi

#
# Utilities
#
ECHO=$(which echo)

#
# Sanitize file name for interaction with FlashAir
#
sstring()
{
sed -e 's/[^a-zA-Z0-9./_-]/_/g' \
 -e 's/^\.\.\//_\.\.\//' \
 -e 's/\/\.\.\//\/_\.\._\//g'
}

#
# Display a single step of a spinner
# on a VT100-compatible terminals
#
spinner_char=""
spinner()
{
if [ "${spinner_char}" = "-" ] ; then spinner_char="\\" ; else
if [ "${spinner_char}" = "\\" ] ; then spinner_char="|" ; else
if [ "${spinner_char}" = "|" ] ; then spinner_char="/" ; else
 spinner_char="-" ;
fi;fi;fi
${ECHO} -ne "\x1b[1D${spinner_char}"
}


#
# Get directory from Transcend card
#
ts_getdirectory()
{
dir="${1}"
count=""
filename=""
filetype=""
wget -q -O- "${BASEURL}/cgi-bin/tslist?PATH=${dir}" | \
  grep "FileName0=" | \
  tr '&' '\n' | \
  grep -E "File.*[0-9]*=" | \
  grep -v "FileCount=" | \
  while read line
    do
      newcount=$(echo "${line}" | sed -e "s/^[A-Za-z]*//" -e "s/=.*$//")
      if [ "${count}" != "" -a  "${newcount}" != "${count}" ]
        then
            filename=""
            filetype=""
      fi
      key=$(echo "${line}" | sed "s/[0-9=].*$//" | sstring)
      value=$(echo "${line}" | sed "s/^.*=//" | sstring)
      count="${newcount}"
      if [ "${key}" = "FileName" ]
        then
          filename="${value}"
      else
        if [ "${key}" = "FileType" ]
          then
            filetype="${value}"
        fi
      fi
      if [ "${filename}" != "" -a "${filetype}" != "" ]
        then
          if [ "${filetype}" = "File" ]
            then
              filesize=$(wget -q -O- "${BASEURL}/cgi-bin/tscmd?\
CMD=GET_FILE_INFO&FILE=${dir}/${filename}" \
               |  grep -i "File size:" | \
               sed -e "s/^.*:[^0-9]*//" -e "s/[^0-9]*$//")
              echo "FILE"
              echo "${filesize}"
              echo "${filename}"
          else
            if [ "${filetype}" = "Directory" ]
              then
                echo "DIR"
                echo "0"
                echo "${filename}"
            fi
          fi
          filename=""
          filetype=""
      fi
    done
}


#
# Cleanup procedure for exit and signal handler
#
restore_wlan()
{
if [ "${orig_conn}" = "--" ]
  then
    echo "Disconnecting from ${SSID}"
    nmcli connection down "${SSID}" >/dev/null 2>&1
else
  if [ "${orig_conn}" != "${SSID}" ]
    then
      echo "Restoring connection ${orig_conn}"
      nmcli connection up "${orig_conn}" ifname "${WLANIF}" >/dev/null 2>&1
  fi
fi
}

#
# Check if $SSID is the current connection, and
# connect to it if this is not the case.
#
# This procedure will wait indefinitely if the
# connection is not available.
#
check_wlan()
{
curr_conn=$(nmcli device show "${WLANIF}" 2>/dev/null | \
  grep -F 'GENERAL.CONNECTION:' | \
  sed -e 's/^.*: *//')
while [ "${curr_conn}" != "${SSID}" ]
  do
    if [ "${curr_conn}" != "--" ]
      then
        nmcli connection down "${curr_conn}" >/dev/null 2>&1
    fi
    ${ECHO} -n "Scanning..."
    nmcli device wifi rescan ifname "${WLANIF}" 2>/dev/null
    ${ECHO} -n " Looking for ${SSID}... "
    lasttime=$(($(date +%s)/20))
    found=""
    while [ "${found}" = "" ]
      do
        currtime=$(($(date +%s)/20))
        if [ "${currtime}" != "${lasttime}" ]
          then
            ${ECHO} -ne "\x0d\x1b[JScanning..."
            nmcli device wifi rescan ifname "${WLANIF}" 2>/dev/null
            sleep 10
            ${ECHO} -n " Looking for ${SSID}... "
            lasttime=$(($(date +%s)/20))
        fi
	sleep .5
        found=$(nmcli device wifi list ifname "${WLANIF}" 2>/dev/null | \
          sed -e 's/^\** *//' | cut -d' ' -f1 | tail -n +2 | \
          grep -F "${SSID}")
	spinner
      done
    ${ECHO} -ne "\x0d\x1b[JConnecting to ${SSID}..."
    nmcli connection up "${SSID}" ifname "${WLANIF}" >/dev/null 2>&1
    curr_conn=$(nmcli device show "${WLANIF}" 2>/dev/null | \
      grep -F 'GENERAL.CONNECTION:' | \
      sed -e 's/^.*: *//')
    if [ "${curr_conn}" = "${SSID}" ]
      then
        ${ECHO} -e "\x0d\x1b[JConnected to ${SSID}"
    else
      echo " Failure"
    fi
  done
}

#
# Main body of the script
#
orig_conn=$(nmcli device show "${WLANIF}" 2>/dev/null | \
  grep -F 'GENERAL.CONNECTION:' | \
  sed -e 's/^.*: *//')

trap "echo "" ; restore_wlan; exit 0" 1 2 15

if [ "${orig_conn}" != "--" ]
  then
    echo "Originally connected to ${orig_conn}"
fi

check_wlan

case "${HWTYPE}" in

    "FlashAir")
wget -O- "${BASEURL}/DCIM/" 2>/dev/null| \
  grep -E '^wlansd\[[0-9]+\]='| cut -d\" -f2 | \
  (
while read line
  do
    dir=$(echo $line | cut -d, -f1 | sstring)
    upfilename=$(echo $line | cut -d, -f2 | sstring)
    filesize=$(echo $line | cut -d, -f3)
    if [ "${dir}" = "/DCIM" -a "${filesize}" = "0" ]
      then
        check_wlan
        wget -O- "${BASEURL}/DCIM/${upfilename}" 2>/dev/null| \
          grep -E '^wlansd\[[0-9]+\]='| cut -d\" -f2 | \
          (
while read line
  do
    dir=$(echo $line | cut -d, -f1 | sstring)
    filename=$(echo $line | cut -d, -f2 | sstring)
    filesize=$(echo $line | cut -d, -f3)
    if [ "${dir}" = "/DCIM/${upfilename}" ]
      then
        local_filesize=$(stat -c "%s" \
                              "${BASEDIR}/${dir}/${filename}" 2>/dev/null )
        if [ "${local_filesize}" != "${filesize}" ]
          then
            [ -d "${BASEDIR}/${dir}" ] || \
              mkdir -p "${BASEDIR}/${dir}"
            check_wlan
            wget -O "${BASEDIR}/${dir}/${filename}" \
                 "${BASEURL}/${dir}/${filename}"
        fi
    fi
  done
          )
    fi
  done
  )
;;

    "Transcend")
ts_getdirectory "/www/sd/DCIM" | \
  while read filetype
    do
      read filesize
      read filename
      if [ "${filetype}" = "DIR" ]
        then
          dir="${filename}"
          check_wlan
          ts_getdirectory "/www/sd/DCIM/${dir}" | \
            while read filetype
              do
                read filesize
                read filename
                if [ "${filetype}" = "FILE" ]
                  then
                    local_filesize=$(stat -c "%s" \
                                        "${BASEDIR}/DCIM/${dir}/${filename}" \
                                        2>/dev/null )
                    if [ "${local_filesize}" != "${filesize}" ]
                      then
                        [ -d "${BASEDIR}/DCIM/${dir}" ] || \
                          mkdir -p "${BASEDIR}/DCIM/${dir}"
                        check_wlan
                        wget -O "${BASEDIR}/DCIM/${dir}/${filename}" \
                             "${BASEURL}/sd/DCIM/${dir}/${filename}"
                    fi
                fi
              done
      fi
    done
;;
    *)
echo "Unknown HWTYPE ${HWTYPE}" >&2
;;
esac
restore_wlan
